// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd/diagram.svg" // Chemin avec une extension valide
  format   = "svg" // Format du diagramme
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  name       String
  picture    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]
  records    Record[]
  receipts   Receipt[]
  travels    Travel[]
  resources  Resource[]
}

model Travel {
  id          String    @id @default(uuid())
  date        DateTime
  distanceKm  Float
  origin      String
  destination String
  notes       String?
  userEmail   String
  user        User      @relation(fields: [userEmail], references: [email])
  activityId  String
  activity    Activity  @relation(fields: [activityId], references: [id])
  resourceId  String?
  resource    Resource? @relation("TravelToResource", fields: [resourceId], references: [id])

  @@unique([resourceId])
}

model Bank {
  id      String   @id @default(uuid())
  name    String   @unique
  records Record[]
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  records Record[]
}

model Merchant {
  id       String    @id @default(uuid())
  name     String    @unique
  receipts Receipt[]
}

model Activity {
  id        String    @id @default(uuid())
  name      String    @unique
  startDate DateTime
  endDate   DateTime?
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  records   Record[]
  travels   Travel[]
}

model Receipt {
  id            String   @id @default(uuid())
  date          DateTime
  total         Float
  currency      String
  taxAmount     Float?
  paymentMethod String?
  userEmail     String
  user          User     @relation(fields: [userEmail], references: [email])
  merchantName  String
  merchant      Merchant @relation(fields: [merchantName], references: [name])
  recordId      String?  @unique
  record        Record?  @relation("RecordToReceipt", fields: [recordId], references: [id])
}

model Record {
  id               String    @id @default(uuid())
  description      String
  date             DateTime
  amount           Float
  currency         String
  deductible       Boolean
  deductibleAmount Float?
  categoryName     String
  category         Category  @relation(fields: [categoryName], references: [name])
  activityName     String?
  activity         Activity? @relation(fields: [activityName], references: [name])
  receipt          Receipt?  @relation("RecordToReceipt")
  cashBack         Float?
  bankName         String
  bank             Bank      @relation(fields: [bankName], references: [name])
  userEmail        String
  user             User      @relation(fields: [userEmail], references: [email])
  resourceId       String?   @unique
  resource         Resource? @relation("RecordToResource", fields: [resourceId], references: [id])
}

enum ResourceType {
  INVOICE
  RECEIPT
  TRAVEL
  OTHER
  BANK_STATEMENT
  PAYSLIP
  CONTRACT
  IDENTITY_DOCUMENT
  INSURANCE_POLICY
  WARRANTY
  CERTIFICATE
  MEDICAL_RECORD
  TAX_DOCUMENT
  LEGAL_DOCUMENT
  PROPERTY_DOCUMENT
  VEHICLE_DOCUMENT
  EDUCATIONAL_DOCUMENT
}

model Resource {
  id          String       @id @default(uuid())
  type        ResourceType
  fileName    String?
  fileType    String?
  fileLink    String?
  ocrRawData  String?
  uploadedAt  DateTime     @default(now())
  description String?
  userEmail   String
  user        User         @relation(fields: [userEmail], references: [email])
  parentId    String?
  parent      Resource?    @relation("ParentToChild", fields: [parentId], references: [id])
  children    Resource[]   @relation("ParentToChild")
  record      Record?      @relation("RecordToResource")
  travel      Travel?      @relation("TravelToResource")
  isArchived  Boolean      @default(false)
}
